name: builds

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.7, 3.8]
        framework: [tensorflow, pytorch]
    steps:
      - if: matrix.os == 'macos-latest'
        name: Install MacOS prerequisites
        run: brew install cairo pango gdk-pixbuf libffi
      - if: matrix.os == 'windows-latest'
        name: Install dependencies (Windows)
        shell: powershell
        run: |
          bitsadmin.exe /rawreturn /transfer "cURL-certicates" /priority FOREGROUND https://curl.se/ca/cacert.pem D:\a\ggplotnim\ggplotnim\nim\bin\cacert.pem
          choco install imagemagick wget
          wget -O cairo-windows.zip https://github.com/preshing/cairo-windows/releases/download/1.17.2/cairo-windows-1.17.2.zip
          tar -xf cairo-windows.zip
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
          architecture: x64
      - if: matrix.framework == 'tensorflow'
        name: Cache python modules (TF)
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pkg-deps-${{ matrix.python }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-pkg-deps-${{ matrix.python }}-${{ hashFiles('requirements.txt') }}-
            ${{ runner.os }}-pkg-deps-${{ matrix.python }}-
            ${{ runner.os }}-pkg-deps-
            ${{ runner.os }}-
      - if: matrix.framework == 'pytorch'
        name: Cache python modules (PT)
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pkg-deps-${{ matrix.python }}-${{ hashFiles('requirements-pt.txt') }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-pkg-deps-${{ matrix.python }}-${{ hashFiles('requirements-pt.txt') }}-
            ${{ runner.os }}-pkg-deps-${{ matrix.python }}-
            ${{ runner.os }}-pkg-deps-
            ${{ runner.os }}-
      - if: matrix.framework == 'tensorflow'
        name: Install package (TF)
        run: |
          python -m pip install --upgrade pip
          pip install -e .[tf] --upgrade
      - if: matrix.framework == 'pytorch'
        name: Install package (PT)
        run: |
          python -m pip install --upgrade pip
          pip install -e .[torch] --upgrade
      - name: Import package
        run: python -c "import doctr; print(doctr.__version__)"
